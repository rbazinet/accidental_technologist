name: Pre-Deploy Validation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate-and-build:
    name: Validate Configuration & Build Site
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python for TOML validation
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install validation tools
        run: |
          pip install toml pyyaml

      - name: Validate netlify.toml syntax
        run: |
          echo "üîç Validating netlify.toml syntax..."
          python -c "
          import toml
          try:
              with open('netlify.toml', 'r') as f:
                  config = toml.load(f)
              print('‚úÖ netlify.toml syntax is valid')
              
              # Additional checks
              if 'redirects' in config:
                  print(f'üìã Found {len(config[\"redirects\"])} redirect rules')
                  
                  # Check for common issues
                  for i, redirect in enumerate(config['redirects']):
                      if 'from' not in redirect or 'to' not in redirect:
                          print(f'‚ùå Redirect {i+1} missing required fields')
                          exit(1)
                      if not redirect['from'].startswith('/') and not redirect['from'].startswith('http'):
                          print(f'‚ùå Redirect {i+1} has invalid from pattern: {redirect[\"from\"]}')
                          exit(1)
              else:
                  print('‚ö†Ô∏è  No redirects found in netlify.toml')
          except Exception as e:
              print(f'‚ùå netlify.toml syntax error: {e}')
              exit(1)
          "

      - name: Validate Jekyll config files
        run: |
          echo "üîç Validating Jekyll configuration..."
          python -c "
          import yaml
          try:
              with open('_config.yml', 'r') as f:
                  config = yaml.safe_load(f)
              print('‚úÖ _config.yml syntax is valid')
              
              # Check for required fields
              required_fields = ['title', 'url', 'baseurl']
              for field in required_fields:
                  if field not in config:
                      print(f'‚ùå Missing required field: {field}')
                      exit(1)
              
              # Check URL format
              if not config['url'].startswith('https://'):
                  print('‚ùå URL should use HTTPS')
                  exit(1)
                  
              print(f'üåê Site URL: {config[\"url\"]}')
              print(f'üìù Site Title: {config[\"title\"]}')
              
          except Exception as e:
              print(f'‚ùå _config.yml syntax error: {e}')
              exit(1)
          "

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.5'
          bundler-cache: true

      - name: Install dependencies
        run: bundle install

      - name: Build Jekyll site
        run: |
          echo "üèóÔ∏è  Building Jekyll site..."
          JEKYLL_ENV=production bundle exec jekyll build --config _config.yml,_config_production.yml
          echo "‚úÖ Jekyll build successful"

      - name: Validate build output
        run: |
          echo "üîç Validating build output..."
          
          # Check for essential files
          if [ ! -d "_site" ]; then
            echo "‚ùå _site directory not created"
            exit 1
          fi
          
          if [ ! -f "_site/sitemap.xml" ]; then
            echo "‚ùå sitemap.xml not generated"
            exit 1
          fi
          
          if [ ! -f "_site/index.html" ]; then
            echo "‚ùå index.html not generated"
            exit 1
          fi
          
          # Count generated files
          post_count=$(find _site -name "*.html" | wc -l)
          echo "üìÑ Generated $post_count HTML files"
          
          # Validate sitemap
          python3 -c "
          import xml.etree.ElementTree as ET
          try:
              tree = ET.parse('_site/sitemap.xml')
              root = tree.getroot()
              url_count = len(root)
              print(f'üó∫Ô∏è  Sitemap contains {url_count} URLs')
              
              # Check for HTTPS URLs
              http_count = 0
              for url in root:
                  loc = url.find('{http://www.sitemaps.org/schemas/sitemap/0.9}loc')
                  if loc is not None and loc.text.startswith('http://'):
                      http_count += 1
              
              if http_count > 0:
                  print(f'‚ö†Ô∏è  Found {http_count} HTTP URLs in sitemap (should be HTTPS)')
              else:
                  print('‚úÖ All URLs in sitemap use HTTPS')
                  
          except Exception as e:
              print(f'‚ùå sitemap.xml validation error: {e}')
              exit(1)
          "
          
          echo "‚úÖ Build validation completed"

      - name: Check for common issues
        run: |
          echo "üîç Checking for common issues..."
          
          # Check for HTTP links in posts
          if grep -r "http://" _posts/ --exclude="*.md~" 2>/dev/null; then
            echo "‚ùå Found HTTP links in posts (should be HTTPS)"
            echo "Run: find _posts -name '*.md' -exec sed -i 's/http:\/\//https:\/\//g' {} \;"
            exit 1
          else
            echo "‚úÖ No HTTP links found in posts"
          fi
          
          # Check for broken image references
          broken_images=$(find _posts/ -name "*.md" -exec grep -l "!\[.*\](" {} \; | head -3)
          if [ -n "$broken_images" ]; then
            echo "‚ö†Ô∏è  Found image references - manual review recommended:"
            echo "$broken_images"
          fi
          
          # Check robots.txt
          if [ -f "robots.txt" ]; then
            echo "‚úÖ robots.txt found"
            if grep -q "Sitemap:" robots.txt; then
              echo "‚úÖ Sitemap reference found in robots.txt"
            else
              echo "‚ö†Ô∏è  No sitemap reference in robots.txt"
            fi
          else
            echo "‚ö†Ô∏è  robots.txt not found"
          fi
          
          echo "‚úÖ Common issues check completed"

      - name: Summary
        run: |
          echo ""
          echo "üéâ Pre-deploy validation completed successfully!"
          echo "üìã Summary:"
          echo "  ‚úÖ netlify.toml syntax validated"
          echo "  ‚úÖ Jekyll configuration validated"
          echo "  ‚úÖ Site built successfully"
          echo "  ‚úÖ Build artifacts verified"
          echo "  ‚úÖ Common issues checked"
          echo ""
          echo "üöÄ Ready for deployment to Netlify!"